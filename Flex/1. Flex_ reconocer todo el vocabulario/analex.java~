/* The following code was generated by JFlex 1.4.3 on 8/05/17 20:37 */



//* --------------------------Seccion codigo-usuario ------------------------*/


import java.io.*;
import java_cup.runtime.Symbol;



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 8/05/17 20:37 from the specification file
 * <tt>Lex.flex</tt>
 */
class analex {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 2;
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\4\1\2\2\0\1\1\22\0\1\3\1\51\1\52\1\5"+
    "\1\64\1\50\1\36\1\62\1\53\1\54\1\47\1\44\1\33\1\45"+
    "\1\70\1\46\12\63\1\0\1\34\1\42\1\6\1\43\1\66\1\67"+
    "\32\72\1\55\1\0\1\56\1\40\1\65\1\0\1\24\1\7\1\32"+
    "\1\14\1\10\1\23\1\11\1\22\1\12\1\72\1\30\1\20\1\72"+
    "\1\13\1\26\1\35\1\16\1\15\1\25\1\27\1\17\1\72\1\21"+
    "\1\72\1\31\1\72\1\57\1\37\1\60\1\41\142\0\32\71\u0565\0"+
    "\12\61\206\0\12\61\306\0\12\61\u019c\0\12\61\166\0\12\61\166\0"+
    "\12\61\166\0\12\61\166\0\12\61\166\0\12\61\166\0\12\61\166\0"+
    "\12\61\166\0\12\61\340\0\12\61\166\0\12\61\106\0\12\61\u0116\0"+
    "\12\61\106\0\12\61\u0746\0\12\61\46\0\12\61\u012c\0\12\61\200\0"+
    "\12\61\246\0\12\61\6\0\12\61\266\0\12\61\126\0\12\61\206\0"+
    "\12\61\6\0\12\61\u89c6\0\12\61\u02a6\0\12\61\46\0\12\61\306\0"+
    "\12\61\166\0\12\61\u0196\0\12\61\u5316\0\12\61\346\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\1\3\1\4\1\5\1\6\16\7"+
    "\1\10\1\11\1\7\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\1\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\25"+
    "\1\35\1\1\1\36\1\37\1\2\1\40\1\41\2\0"+
    "\5\7\1\42\3\7\1\43\6\7\1\44\4\7\1\45"+
    "\1\44\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\0\1\55\1\56\1\57\1\60\2\0\1\61\1\0"+
    "\1\62\2\0\2\7\1\63\1\7\1\64\1\65\1\66"+
    "\7\7\1\67\1\45\4\7\1\70\1\71\2\0\1\72"+
    "\2\7\1\73\6\7\1\74\2\7\1\75\1\76\1\77"+
    "\1\100\1\101\1\0\1\102\1\103\1\104\1\7\1\105"+
    "\2\7\1\106\1\107\1\110\1\0\1\7\1\111\1\112"+
    "\1\0\1\113";

  private static int [] zzUnpackAction() {
    int [] result = new int[157];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\73\0\166\0\261\0\166\0\166\0\166\0\354"+
    "\0\u0127\0\u0162\0\u019d\0\u01d8\0\u0213\0\u024e\0\u0289\0\u02c4"+
    "\0\u02ff\0\u033a\0\u0375\0\u03b0\0\u03eb\0\u0426\0\u0461\0\166"+
    "\0\166\0\u049c\0\u04d7\0\u0512\0\166\0\166\0\u054d\0\u0588"+
    "\0\u05c3\0\u05fe\0\u0639\0\u0674\0\u06af\0\u06ea\0\166\0\166"+
    "\0\166\0\166\0\166\0\166\0\166\0\u0725\0\u0760\0\166"+
    "\0\u079b\0\166\0\u07d6\0\u0811\0\166\0\166\0\u084c\0\u0887"+
    "\0\u08c2\0\u08fd\0\166\0\u0938\0\u0973\0\u01d8\0\u09ae\0\u09e9"+
    "\0\u0a24\0\u01d8\0\u0a5f\0\u0a9a\0\u0ad5\0\u0b10\0\u0b4b\0\u0b86"+
    "\0\u01d8\0\u0bc1\0\u0bfc\0\u0c37\0\u0c72\0\166\0\166\0\166"+
    "\0\166\0\166\0\166\0\166\0\166\0\166\0\u0cad\0\166"+
    "\0\u0ce8\0\166\0\166\0\u0760\0\u0d23\0\u0d5e\0\u0d99\0\166"+
    "\0\u0dd4\0\u0e0f\0\u0e4a\0\u0e85\0\u01d8\0\u0ec0\0\u01d8\0\u01d8"+
    "\0\u01d8\0\u0efb\0\u0f36\0\u0f71\0\u0fac\0\u0fe7\0\u1022\0\u105d"+
    "\0\u01d8\0\u01d8\0\u1098\0\u10d3\0\u110e\0\u1149\0\166\0\166"+
    "\0\u1184\0\u11bf\0\166\0\u11fa\0\u1235\0\u01d8\0\u1270\0\u12ab"+
    "\0\u12e6\0\u1321\0\u135c\0\u1397\0\u01d8\0\u13d2\0\u140d\0\u01d8"+
    "\0\u01d8\0\u01d8\0\u1448\0\u1184\0\u1483\0\u01d8\0\u01d8\0\u01d8"+
    "\0\u14be\0\u01d8\0\u14f9\0\u1534\0\u01d8\0\u01d8\0\u01d8\0\u156f"+
    "\0\u15aa\0\u01d8\0\u01d8\0\u15e5\0\u01d8";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[157];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\14\1\21"+
    "\1\14\1\22\1\14\1\23\1\24\1\14\1\25\1\26"+
    "\2\14\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\56\1\60\1\14\1\3\1\61\1\62"+
    "\1\3\1\14\2\5\1\0\1\63\1\5\1\64\1\5"+
    "\24\63\2\5\1\63\14\5\1\65\7\5\1\65\1\63"+
    "\4\5\3\63\75\0\1\5\70\0\2\10\1\0\70\10"+
    "\6\0\1\66\1\67\1\70\71\0\1\14\1\71\4\14"+
    "\1\72\15\14\2\0\1\14\1\0\1\73\11\0\1\73"+
    "\11\0\1\14\1\0\1\14\1\73\3\0\1\14\7\0"+
    "\4\14\1\74\4\14\1\75\12\14\2\0\1\14\1\0"+
    "\1\73\11\0\1\73\11\0\1\14\1\0\1\14\1\73"+
    "\3\0\1\14\7\0\24\14\2\0\1\14\1\0\1\73"+
    "\11\0\1\73\11\0\1\14\1\0\1\14\1\73\3\0"+
    "\1\14\7\0\14\14\1\76\7\14\2\0\1\14\1\0"+
    "\1\73\11\0\1\73\11\0\1\14\1\0\1\14\1\73"+
    "\3\0\1\14\7\0\3\14\1\77\13\14\1\100\4\14"+
    "\2\0\1\14\1\0\1\73\11\0\1\73\11\0\1\14"+
    "\1\0\1\14\1\73\3\0\1\14\7\0\1\14\1\101"+
    "\15\14\1\102\4\14\2\0\1\14\1\0\1\73\11\0"+
    "\1\73\11\0\1\14\1\0\1\14\1\73\3\0\1\14"+
    "\7\0\1\14\1\103\22\14\2\0\1\14\1\0\1\73"+
    "\11\0\1\73\11\0\1\14\1\0\1\14\1\73\3\0"+
    "\1\14\7\0\4\14\1\104\17\14\2\0\1\14\1\0"+
    "\1\73\11\0\1\73\11\0\1\14\1\0\1\14\1\73"+
    "\3\0\1\14\7\0\13\14\1\105\10\14\2\0\1\14"+
    "\1\0\1\73\11\0\1\73\11\0\1\14\1\0\1\14"+
    "\1\73\3\0\1\14\7\0\15\14\1\106\1\14\1\107"+
    "\4\14\2\0\1\14\1\0\1\73\11\0\1\73\11\0"+
    "\1\14\1\0\1\14\1\73\3\0\1\14\7\0\4\14"+
    "\1\110\17\14\2\0\1\14\1\0\1\73\11\0\1\73"+
    "\11\0\1\14\1\0\1\14\1\73\3\0\1\14\7\0"+
    "\6\14\1\111\15\14\2\0\1\14\1\0\1\73\11\0"+
    "\1\73\11\0\1\14\1\0\1\14\1\73\3\0\1\14"+
    "\7\0\6\14\1\112\4\14\1\113\10\14\2\0\1\14"+
    "\1\0\1\73\11\0\1\73\11\0\1\14\1\0\1\14"+
    "\1\73\3\0\1\14\7\0\15\14\1\114\6\14\2\0"+
    "\1\14\1\0\1\73\11\0\1\73\11\0\1\14\1\0"+
    "\1\14\1\73\3\0\1\14\7\0\10\14\1\115\13\14"+
    "\2\0\1\14\1\0\1\73\11\0\1\73\11\0\1\14"+
    "\1\0\1\14\1\73\3\0\1\14\36\0\1\116\73\0"+
    "\1\117\41\0\1\120\33\0\1\121\36\0\1\122\34\0"+
    "\1\123\35\0\1\124\72\0\1\125\72\0\1\126\37\0"+
    "\1\127\32\0\1\130\40\0\1\131\31\0\1\132\72\0"+
    "\1\133\145\0\1\56\1\134\1\56\7\0\2\135\1\0"+
    "\70\135\7\0\24\136\2\0\1\136\27\0\1\136\1\0"+
    "\1\137\2\0\1\136\3\0\1\63\3\0\24\63\2\0"+
    "\1\63\25\0\1\63\4\0\3\63\57\0\1\140\23\0"+
    "\1\141\75\0\1\142\66\0\2\14\1\143\21\14\2\0"+
    "\1\14\1\0\1\73\11\0\1\73\11\0\1\14\1\0"+
    "\1\14\1\73\3\0\1\14\7\0\1\14\1\144\22\14"+
    "\2\0\1\14\1\0\1\73\11\0\1\73\11\0\1\14"+
    "\1\0\1\14\1\73\3\0\1\14\7\0\5\14\1\145"+
    "\16\14\2\0\1\14\1\0\1\73\11\0\1\73\11\0"+
    "\1\14\1\0\1\14\1\73\3\0\1\14\7\0\16\14"+
    "\1\146\5\14\2\0\1\14\1\0\1\73\11\0\1\73"+
    "\11\0\1\14\1\0\1\14\1\73\3\0\1\14\7\0"+
    "\11\14\1\147\12\14\2\0\1\14\1\0\1\73\11\0"+
    "\1\73\11\0\1\14\1\0\1\14\1\73\3\0\1\14"+
    "\7\0\20\14\1\150\3\14\2\0\1\14\1\0\1\73"+
    "\11\0\1\73\11\0\1\14\1\0\1\14\1\73\3\0"+
    "\1\14\7\0\14\14\1\151\7\14\2\0\1\14\1\0"+
    "\1\73\11\0\1\73\11\0\1\14\1\0\1\14\1\73"+
    "\3\0\1\14\7\0\7\14\1\152\10\14\1\153\3\14"+
    "\2\0\1\14\1\0\1\73\11\0\1\73\11\0\1\14"+
    "\1\0\1\14\1\73\3\0\1\14\7\0\11\14\1\154"+
    "\6\14\1\155\3\14\2\0\1\14\1\0\1\73\11\0"+
    "\1\73\11\0\1\14\1\0\1\14\1\73\3\0\1\14"+
    "\7\0\1\14\1\156\1\14\1\157\20\14\2\0\1\14"+
    "\1\0\1\73\11\0\1\73\11\0\1\14\1\0\1\14"+
    "\1\73\3\0\1\14\7\0\11\14\1\160\12\14\2\0"+
    "\1\14\1\0\1\73\11\0\1\73\11\0\1\14\1\0"+
    "\1\14\1\73\3\0\1\14\7\0\6\14\1\161\15\14"+
    "\2\0\1\14\1\0\1\73\11\0\1\73\11\0\1\14"+
    "\1\0\1\14\1\73\3\0\1\14\7\0\5\14\1\162"+
    "\16\14\2\0\1\14\1\0\1\73\11\0\1\73\11\0"+
    "\1\14\1\0\1\14\1\73\3\0\1\14\7\0\10\14"+
    "\1\163\13\14\2\0\1\14\1\0\1\73\11\0\1\73"+
    "\11\0\1\14\1\0\1\14\1\73\3\0\1\14\7\0"+
    "\1\14\1\164\22\14\2\0\1\14\1\0\1\73\11\0"+
    "\1\73\11\0\1\14\1\0\1\14\1\73\3\0\1\14"+
    "\7\0\16\14\1\165\5\14\2\0\1\14\1\0\1\73"+
    "\11\0\1\73\11\0\1\14\1\0\1\14\1\73\3\0"+
    "\1\14\7\0\20\14\1\166\3\14\2\0\1\14\1\0"+
    "\1\73\11\0\1\73\11\0\1\14\1\0\1\14\1\73"+
    "\3\0\1\14\52\0\1\167\26\0\1\170\146\0\1\171"+
    "\17\0\24\136\2\0\1\136\25\0\1\136\1\0\1\136"+
    "\4\0\1\136\7\0\24\136\2\0\1\136\27\0\1\136"+
    "\4\0\1\136\11\0\1\172\75\0\1\173\65\0\3\14"+
    "\1\174\20\14\2\0\1\14\1\0\1\73\11\0\1\73"+
    "\11\0\1\14\1\0\1\14\1\73\3\0\1\14\7\0"+
    "\15\14\1\175\6\14\2\0\1\14\1\0\1\73\11\0"+
    "\1\73\11\0\1\14\1\0\1\14\1\73\3\0\1\14"+
    "\7\0\1\14\1\176\1\14\1\177\20\14\2\0\1\14"+
    "\1\0\1\73\11\0\1\73\11\0\1\14\1\0\1\14"+
    "\1\73\3\0\1\14\7\0\10\14\1\200\13\14\2\0"+
    "\1\14\1\0\1\73\11\0\1\73\11\0\1\14\1\0"+
    "\1\14\1\73\3\0\1\14\7\0\6\14\1\201\1\14"+
    "\1\202\13\14\2\0\1\14\1\0\1\73\11\0\1\73"+
    "\11\0\1\14\1\0\1\14\1\73\3\0\1\14\7\0"+
    "\1\14\1\203\22\14\2\0\1\14\1\0\1\73\11\0"+
    "\1\73\11\0\1\14\1\0\1\14\1\73\3\0\1\14"+
    "\7\0\3\14\1\204\20\14\2\0\1\14\1\0\1\73"+
    "\11\0\1\73\11\0\1\14\1\0\1\14\1\73\3\0"+
    "\1\14\7\0\4\14\1\205\17\14\2\0\1\14\1\0"+
    "\1\73\11\0\1\73\11\0\1\14\1\0\1\14\1\73"+
    "\3\0\1\14\7\0\11\14\1\206\12\14\2\0\1\14"+
    "\1\0\1\73\11\0\1\73\11\0\1\14\1\0\1\14"+
    "\1\73\3\0\1\14\7\0\16\14\1\207\5\14\2\0"+
    "\1\14\1\0\1\73\11\0\1\73\11\0\1\14\1\0"+
    "\1\14\1\73\3\0\1\14\7\0\1\14\1\210\22\14"+
    "\2\0\1\14\1\0\1\73\11\0\1\73\11\0\1\14"+
    "\1\0\1\14\1\73\3\0\1\14\7\0\4\14\1\211"+
    "\17\14\2\0\1\14\1\0\1\73\11\0\1\73\11\0"+
    "\1\14\1\0\1\14\1\73\3\0\1\14\7\0\1\14"+
    "\1\212\22\14\2\0\1\14\1\0\1\73\11\0\1\73"+
    "\11\0\1\14\1\0\1\14\1\73\3\0\1\14\7\0"+
    "\16\14\1\213\5\14\2\0\1\14\1\0\1\73\11\0"+
    "\1\73\11\0\1\14\1\0\1\14\1\73\3\0\1\14"+
    "\63\0\1\214\21\0\1\215\67\0\4\14\1\216\17\14"+
    "\2\0\1\14\1\0\1\73\11\0\1\73\11\0\1\14"+
    "\1\0\1\14\1\73\3\0\1\14\7\0\21\14\1\217"+
    "\2\14\2\0\1\14\1\0\1\73\11\0\1\73\11\0"+
    "\1\14\1\0\1\14\1\73\3\0\1\14\7\0\14\14"+
    "\1\220\7\14\2\0\1\14\1\0\1\73\11\0\1\73"+
    "\11\0\1\14\1\0\1\14\1\73\3\0\1\14\7\0"+
    "\3\14\1\221\20\14\2\0\1\14\1\0\1\73\11\0"+
    "\1\73\11\0\1\14\1\0\1\14\1\73\3\0\1\14"+
    "\7\0\22\14\1\222\1\14\2\0\1\14\1\0\1\73"+
    "\11\0\1\73\11\0\1\14\1\0\1\14\1\73\3\0"+
    "\1\14\7\0\6\14\1\223\15\14\2\0\1\14\1\0"+
    "\1\73\11\0\1\73\11\0\1\14\1\0\1\14\1\73"+
    "\3\0\1\14\7\0\16\14\1\224\5\14\2\0\1\14"+
    "\1\0\1\73\11\0\1\73\11\0\1\14\1\0\1\14"+
    "\1\73\3\0\1\14\7\0\11\14\1\225\12\14\2\0"+
    "\1\14\1\0\1\73\11\0\1\73\11\0\1\14\1\0"+
    "\1\14\1\73\3\0\1\14\7\0\1\14\1\226\22\14"+
    "\2\0\1\14\1\0\1\73\11\0\1\73\11\0\1\14"+
    "\1\0\1\14\1\73\3\0\1\14\7\0\1\14\1\227"+
    "\22\14\2\0\1\14\1\0\1\73\11\0\1\73\11\0"+
    "\1\14\1\0\1\14\1\73\3\0\1\14\2\213\1\0"+
    "\70\213\13\0\1\230\66\0\6\14\1\231\15\14\2\0"+
    "\1\14\1\0\1\73\11\0\1\73\11\0\1\14\1\0"+
    "\1\14\1\73\3\0\1\14\7\0\4\14\1\232\17\14"+
    "\2\0\1\14\1\0\1\73\11\0\1\73\11\0\1\14"+
    "\1\0\1\14\1\73\3\0\1\14\7\0\16\14\1\233"+
    "\5\14\2\0\1\14\1\0\1\73\11\0\1\73\11\0"+
    "\1\14\1\0\1\14\1\73\3\0\1\14\6\0\1\234"+
    "\73\0\1\14\1\235\22\14\2\0\1\14\1\0\1\73"+
    "\11\0\1\73\11\0\1\14\1\0\1\14\1\73\3\0"+
    "\1\14\7\0\1\67\1\70\62\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5664];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\1\1\3\11\20\1\2\11\3\1\2\11"+
    "\10\1\7\11\2\1\1\11\1\1\1\11\2\1\2\11"+
    "\2\0\2\1\1\11\22\1\11\11\1\0\1\11\1\1"+
    "\2\11\2\0\1\1\1\0\1\11\2\0\24\1\2\11"+
    "\2\0\1\11\21\1\1\0\12\1\1\0\3\1\1\0"+
    "\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[157];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */


/* Creamos una instancia del analizador léxico y lo ejecutamos sobre el argumento dado en la entrada (sacamos un resumen de los caracteres, palabras) */


//these variables are defined static because they will be referenced in main, a static method

  static int numCount =0, identCount = 0, lineCount = 0;

  public static void main(String [] args) throws IOException

  {
      //create a scanner and use the scanner's yylex function

      //if you want standard input, System.in instead of new FileReader(args[0])
      analex lexer = new analex(new FileReader(args[0]));
      lexer.yylex();
      System.out.println("Numeros: " + numCount + " Identificadores: " + identCount +" Lines: " +lineCount);
}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  analex(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  analex(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 276) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Object yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 4: 
          { /* ignora los tabuladores */
          }
        case 76: break;
        case 50: 
          { System.out.println("Token #{ <" +yytext()+ "> encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1) );
          }
        case 77: break;
        case 67: 
          { System.out.println("Token break <" +yytext()+ "> encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
          }
        case 78: break;
        case 52: 
          { System.out.println("Token nil <" +yytext()+ "> encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
          }
        case 79: break;
        case 38: 
          { System.out.println("Token Less_Equal <" +yytext()+ "> encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
          }
        case 80: break;
        case 20: 
          { System.out.println("Token Mod <" +yytext()+ "> encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
          }
        case 81: break;
        case 65: 
          { System.out.println("Token FLOAT <" +yytext()+ "> encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
          }
        case 82: break;
        case 46: 
          { System.out.println("Token Exp <" +yytext()+ "> encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
          }
        case 83: break;
        case 28: 
          { System.out.println("Token INT <" +yytext()+ "> encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
          }
        case 84: break;
        case 18: 
          { System.out.println("Token Div <" +yytext()+ "> encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
          }
        case 85: break;
        case 74: 
          { System.out.println("Token unless <" +yytext()+ "> encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
          }
        case 86: break;
        case 51: 
          { System.out.println("Token end <" +yytext()+ "> encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
          }
        case 87: break;
        case 48: 
          { System.out.println("Token Not_Equal <" +yytext()+ "> encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
          }
        case 88: break;
        case 71: 
          { System.out.println("Token while <" +yytext()+ "> encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
          }
        case 89: break;
        case 30: 
          { System.out.println("Token Ident.Ident <" +yytext()+ "> encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
          }
        case 90: break;
        case 66: 
          { System.out.println("Token begin <" +yytext()+ "> encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
          }
        case 91: break;
        case 26: 
          { System.out.println("Token { <" +yytext()+ "> encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
          }
        case 92: break;
        case 68: 
          { System.out.println("Token elsif <" +yytext()+ "> encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
          }
        case 93: break;
        case 42: 
          { System.out.println("Token Plus_Assign <" +yytext()+ "> encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
          }
        case 94: break;
        case 5: 
          { /*SL_COMMENT - DO NOTHING*/System.out.println("Token COMENTARIO SIMPLE <" +yytext()+ "> encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
          }
        case 95: break;
        case 44: 
          { System.out.println("Token Div_Assign <" +yytext()+ "> encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
          }
        case 96: break;
        case 37: 
          { System.out.println("Token AND <" +yytext()+ "> encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
          }
        case 97: break;
        case 31: 
          { System.out.println("Token String <" +yytext()+ "> encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
          }
        case 98: break;
        case 40: 
          { System.out.println("Token Greater_Equal <" +yytext()+ "> encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
          }
        case 99: break;
        case 75: 
          { System.out.println("Token require <" +yytext()+ "> encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
          }
        case 100: break;
        case 56: 
          { System.out.println("Token Escaped_Quote <" +yytext()+ "> encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
          }
        case 101: break;
        case 62: 
          { System.out.println("Token then <" +yytext()+ "> encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
          }
        case 102: break;
        case 10: 
          { System.out.println("Token Bit_And <" +yytext()+ "> encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
          }
        case 103: break;
        case 22: 
          { System.out.println("Token ( <" +yytext()+ "> encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
          }
        case 104: break;
        case 61: 
          { System.out.println("Token true <" +yytext()+ "> encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
          }
        case 105: break;
        case 55: 
          { System.out.println("Token for <" +yytext()+ "> encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
          }
        case 106: break;
        case 64: 
          { System.out.println("Token puts <" +yytext()+ "> encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
          }
        case 107: break;
        case 7: 
          { System.out.println("Token IDFUNCTION <" +yytext()+ "> encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
          }
        case 108: break;
        case 24: 
          { System.out.println("Token [ <" +yytext()+ "> encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
          }
        case 109: break;
        case 17: 
          { System.out.println("Token Minus <" +yytext()+ "> encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
          }
        case 110: break;
        case 36: 
          { System.out.println("Token OR <" +yytext()+ "> encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
          }
        case 111: break;
        case 1: 
          { System.out.println("Token No Valido <" +yytext()+ ">linea: " + (yyline+1) + " columna: " + (yycolumn+1));
          }
        case 112: break;
        case 54: 
          { System.out.println("Token def <" +yytext()+ "> encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
          }
        case 113: break;
        case 23: 
          { System.out.println("Token ) <" +yytext()+ "> encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
          }
        case 114: break;
        case 45: 
          { System.out.println("Token Mul_Assign <" +yytext()+ "> encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
          }
        case 115: break;
        case 53: 
          { System.out.println("Token not <" +yytext()+ "> encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
          }
        case 116: break;
        case 70: 
          { System.out.println("Token until <" +yytext()+ "> encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
          }
        case 117: break;
        case 27: 
          { System.out.println("Token } <" +yytext()+ "> encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
          }
        case 118: break;
        case 9: 
          { System.out.println("Token semicolon <" +yytext()+ "> encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
          }
        case 119: break;
        case 14: 
          { System.out.println("Token Less <" +yytext()+ "> encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
          }
        case 120: break;
        case 69: 
          { System.out.println("Token retry <" +yytext()+ "> encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
          }
        case 121: break;
        case 35: 
          { System.out.println("Token do <" +yytext()+ "> encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
          }
        case 122: break;
        case 47: 
          { System.out.println("Token Mod_Assign <" +yytext()+ "> encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
          }
        case 123: break;
        case 21: 
          { yybegin(STRING);
          }
        case 124: break;
        case 49: 
          { System.out.println("Token Ident <" +yytext()+ "> encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
          }
        case 125: break;
        case 32: 
          { yybegin(YYINITIAL);
          }
        case 126: break;
        case 29: 
          { System.out.println("Token $ <" +yytext()+ "> encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
          }
        case 127: break;
        case 59: 
          { System.out.println("Token else <" +yytext()+ "> encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
          }
        case 128: break;
        case 19: 
          { System.out.println("Token Mul <" +yytext()+ "> encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
          }
        case 129: break;
        case 34: 
          { System.out.println("Token if <" +yytext()+ "> encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
          }
        case 130: break;
        case 12: 
          { System.out.println("Token Bit_Xor <" +yytext()+ "> encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
          }
        case 131: break;
        case 8: 
          { System.out.println("Token comma <" +yytext()+ "> encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
          }
        case 132: break;
        case 60: 
          { System.out.println("Token when <" +yytext()+ "> encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
          }
        case 133: break;
        case 33: 
          { System.out.println("Token Equal <" +yytext()+ "> encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
          }
        case 134: break;
        case 72: 
          { System.out.println("Token false <" +yytext()+ "> encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
          }
        case 135: break;
        case 63: 
          { System.out.println("Token case <" +yytext()+ "> encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
          }
        case 136: break;
        case 16: 
          { System.out.println("Token Plus <" +yytext()+ "> encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
          }
        case 137: break;
        case 25: 
          { System.out.println("Token ] <" +yytext()+ "> encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
          }
        case 138: break;
        case 39: 
          { System.out.println("Token Bit_Shl <" +yytext()+ "> encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
          }
        case 139: break;
        case 13: 
          { System.out.println("Token Bit_Not <" +yytext()+ "> encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
          }
        case 140: break;
        case 6: 
          { System.out.println("Token Assign <" +yytext()+ "> encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
          }
        case 141: break;
        case 73: 
          { System.out.println("Token return <" +yytext()+ "> encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
          }
        case 142: break;
        case 43: 
          { System.out.println("Token Minus_Assign <" +yytext()+ "> encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
          }
        case 143: break;
        case 3: 
          { /* ignora los espacios en blanco */
          }
        case 144: break;
        case 11: 
          { System.out.println("Token Bit_Or <" +yytext()+ "> encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
          }
        case 145: break;
        case 15: 
          { System.out.println("Token Greater <" +yytext()+ "> encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
          }
        case 146: break;
        case 41: 
          { System.out.println("Token Bit_Shr <" +yytext()+ "> encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
          }
        case 147: break;
        case 58: 
          { /*ML_COMMENT - DO NOTHING*/System.out.println("Token COMENTARIO MULTILINEA <" +yytext()+ "> encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
          }
        case 148: break;
        case 57: 
          { System.out.println("Token Exp_Assign <" +yytext()+ "> encontrado en linea: " + (yyline+1) + " columna: " + (yycolumn+1));
          }
        case 149: break;
        case 2: 
          { 
          }
        case 150: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
