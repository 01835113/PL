//////////////////////////////////////////////////
//												//
//												//
//												//
//			cosas importantes:					//
//				ID ESTÁ ROTO					//
//				LITERAL ESTÁ ROTO				//
//												//
//												//
//												//
//												//
//												//
//												//
//////////////////////////////////////////////////

import java_cup.runtime.*;
import java.io.*;

parser code {:
	public static void main(String args[]) throws Exception {
		FileInputStream fichero=new FileInputStream(args[0]);
		DataInputStream entrada =new DataInputStream(fichero);
		try{
			new parser(new Yylex(new BufferedReader(new InputStreamReader(entrada)))).parse();
		}
		catch ( Exception e) {
			e.printStackTrace();
			System.out.println(" Análisis INCORRECTO !! :_(");
				System.exit(1);
			}
			System.out.println("Análisis Correcto!!!<3");
		}
:}


terminal ID, ID_GLOBAL, ID_FUNCTION,ID_ITER;
terminal INT;
terminal FLOAT;
terminal NIL, LITERAL, COMMA, DOT, SEMICOLON, CRLF,DO;
terminal REQUIRE, END, DEF, RETURN, IF, CASE, WHEN, THEN, ELSE, ELSIF, UNLESS, WHILE, RETRY, BREAK, TRUE, FALSE, PLUS, MINUS, MUL, DIV, MOD, EXP;
terminal EQUAL, NOT_EQUAL, GREATER, LESS ,LESS_EQUAL ,GREATER_EQUAL, ASSIGN, PLUS_ASSIGN, MINUS_ASSIGN, MUL_ASSIGN ,DIV_ASSIGN, MOD_ASSIGN, EXP_ASSIGN, BIT_AND, BIT_OR, BIT_XOR, BIT_NOT, BIT_SHL, BIT_SHR, AND, OR, NOT, LEFT_RBRACKET, RIGHT_RBRACKET, LEFT_SBRACKET, RIGHT_SBRACKET;


non terminal prog,
expression_list,
expression,
terminator,
single_object,
function_definition,
class_block,
if_statement,
unless_statement,
rvalue ,
return_statement,
while_statement,
case_statement,
function_definition_header,
function_definition_body,
if_elsif_statement,
array_assignment,
int_result,
float_result,
string_result,
assignment,
lvalue,
function_call,
bool_t,
while_expression_list,
function_definition_params,
function_definition_params_list,
array_definition,
array_definition_elements,
when_statement,
do_statement;

precedence left EXP_ASSIGN, PLUS_ASSIGN, MINUS_ASSIGN, MUL_ASSIGN, DIV_ASSIGN,ASSIGN;
precedence left OR;
precedence left AND;
precedence left EQUAL,NOT_EQUAL;
precedence left GREATER,LESS,GREATER_EQUAL, LESS_EQUAL;
precedence left BIT_OR,BIT_XOR;
precedence left BIT_AND;
precedence left BIT_SHR, BIT_SHL;
precedence left PLUS, MINUS;
precedence left MUL,DIV,MOD;
precedence left COMMA;
precedence left EXP;
precedence right CRLF, SEMICOLON;
precedence left LEFT_RBRACKET,  RIGHT_RBRACKET, RIGHT_SBRACKET, LEFT_SBRACKET;




start with prog;

prog ::= expression_list:e1 {: System.out.println(e1+" function_definition_params 1"); :}
;

expression_list ::= expression terminator
| expression_list expression terminator
| terminator
;

expression ::=  function_definition
| if_statement
| unless_statement
| rvalue
| return_statement
| while_statement
| do_statement
| case_statement
| class_block
;

terminator ::= CRLF terminator | SEMICOLON terminator | SEMICOLON | CRLF
;

function_definition ::=  function_definition_header expression_list END
;

function_definition_header ::=  DEF lvalue function_definition_params CRLF | DEF lvalue CRLF
;

function_definition_params ::=  LEFT_RBRACKET RIGHT_RBRACKET
| LEFT_RBRACKET function_definition_params_list:e1 RIGHT_RBRACKET {: System.out.println(e1+" function_definition_params 1"); :}
| function_definition_params_list:e1 {: System.out.println(e1+" function_definition_params 2"); :}
;

// function_definition_body ::=  expression_list // MIRAR ಠ_ಠ ಠ_ಠ
// ;

function_definition_params_list ::=  lvalue
| function_definition_params_list COMMA lvalue
;

class_block ::=  REQUIRE LITERAL
;

if_statement ::=  IF rvalue CRLF expression_list END
| IF rvalue THEN expression_list END
| IF rvalue CRLF expression_list ELSE CRLF expression_list END
| IF rvalue THEN expression_list ELSE expression_list END
| IF rvalue CRLF expression_list if_elsif_statement END
;

if_elsif_statement ::= ELSIF rvalue CRLF expression_list
| ELSIF rvalue CRLF expression_list ELSE CRLF expression_list
| ELSIF rvalue CRLF expression_list if_elsif_statement
;

unless_statement ::= UNLESS rvalue CRLF expression_list END
;

rvalue ::= array_assignment
| int_result
| float_result
| string_result
| assignment
| lvalue function_call
| bool_t
| NIL
| rvalue EXP rvalue
| NOT rvalue
| BIT_NOT rvalue
| rvalue MUL rvalue
| rvalue DIV rvalue
| rvalue MOD rvalue
| rvalue PLUS rvalue
| rvalue MINUS rvalue
| rvalue BIT_SHL rvalue
| rvalue BIT_SHR rvalue
| rvalue BIT_AND rvalue
| rvalue BIT_OR rvalue
| rvalue BIT_XOR rvalue
| rvalue LESS rvalue
| rvalue GREATER rvalue
| rvalue LESS_EQUAL rvalue
| rvalue GREATER_EQUAL rvalue
| rvalue EQUAL rvalue
| rvalue NOT_EQUAL rvalue
| rvalue OR rvalue
| rvalue AND rvalue
| LEFT_RBRACKET rvalue RIGHT_RBRACKET
;

single_object ::= INT
| FLOAT :e1 {: System.out.println(e1+" ID_GLOBAL"); :}
| LITERAL:e1 {: System.out.println(e1+" LITERAL"); :}
| FALSE :e1 {: System.out.println(e1+" ID_GLOBAL"); :}
| TRUE :e1 {: System.out.println(e1+" ID_GLOBAL"); :}
| NIL :e1 {: System.out.println(e1+" ID_GLOBAL"); :}
;

return_statement ::=  RETURN rvalue
;

while_statement ::=  WHILE rvalue CRLF while_expression_list END
;

lvalue ::= ID_GLOBAL:e1 {: System.out.println(e1+" ID_GLOBAL"); :}
| ID:e1 {: System.out.println(e1+" ID"); :}
| ID DOT ID_FUNCTION:e1 {: System.out.println(e1+" ID DOT"); :}
| ID_FUNCTION:e1 {: System.out.println(e1+" ID_FUNCTION"); :}
;

array_assignment ::= rvalue array_definition ASSIGN rvalue
| lvalue ASSIGN array_definition
;

array_definition ::= LEFT_SBRACKET array_definition_elements RIGHT_SBRACKET
| LEFT_SBRACKET RIGHT_SBRACKET
;

array_definition_elements ::= lvalue COMMA array_definition_elements
| single_object COMMA array_definition_elements
| single_object
| lvalue
;

when_statement ::= WHEN array_definition_elements CRLF expression_list
| WHEN array_definition_elements CRLF expression_list when_statement
| WHEN array_definition_elements CRLF
| ELSE CRLF expression CRLF
;

int_result ::= int_result MUL int_result
| int_result DIV int_result
| int_result MOD int_result
| int_result PLUS int_result
| int_result MINUS int_result
| INT
;

string_result ::= string_result MUL int_result
| int_result MUL string_result
| LITERAL
;

float_result ::= float_result MUL float_result
| float_result DIV float_result
| float_result MOD float_result
| int_result MUL float_result
| int_result DIV float_result
| int_result MOD float_result
| float_result MUL int_result
| float_result DIV int_result
| float_result MOD int_result
| float_result PLUS float_result
| float_result MINUS float_result
| int_result PLUS float_result
| int_result MINUS float_result
| float_result PLUS int_result
| float_result MINUS int_result
| FLOAT
;

assignment ::= lvalue PLUS_ASSIGN rvalue
| lvalue  MINUS_ASSIGN rvalue
| lvalue  MUL_ASSIGN rvalue
| lvalue  DIV_ASSIGN rvalue
| lvalue MOD_ASSIGN rvalue
| lvalue EXP_ASSIGN rvalue
| lvalue ASSIGN rvalue
;

function_call ::= LEFT_SBRACKET function_definition_params RIGHT_SBRACKET
| function_definition_params
| LEFT_SBRACKET RIGHT_SBRACKET
|
;

bool_t ::= TRUE | FALSE
;

while_expression_list ::=  expression terminator
| RETRY terminator
| BREAK terminator
| while_expression_list expression terminator
| while_expression_list RETRY terminator
| while_expression_list BREAK terminator
;

case_statement ::= CASE lvalue CRLF when_statement END
;

do_statement ::= lvalue DO ID_ITER expression_list END
;